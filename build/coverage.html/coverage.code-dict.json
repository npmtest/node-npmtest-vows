{"/home/travis/build/npmtest/node-npmtest-vows/test.js":"/* istanbul instrument in package npmtest_vows */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vows/lib.npmtest_vows.js":"/* istanbul instrument in package npmtest_vows */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vows = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vows = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vows/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vows && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vows */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vows\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vows.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vows.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vows.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vows.__dirname + '/lib.npmtest_vows.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/vows.js":"//\n// Vows.js - asynchronous event-based BDD for node.js\n//\n//   usage:\n//\n//       var vows = require('vows');\n//\n//       vows.describe('Deep Thought').addBatch({\n//           \"An instance of DeepThought\": {\n//               topic: new DeepThought,\n//\n//               \"should know the answer to the ultimate question of life\": function (deepThought) {\n//                   assert.equal (deepThought.question('what is the answer to the universe?'), 42);\n//               }\n//           }\n//       }).run();\n//\nvar path = require('path'),\n    events = require('events'),\n    util = require('util'),\n    vows = exports;\n\n// Options\nvows.options = {\n    Emitter: events.EventEmitter,\n    reporter: require('./vows/reporters/dot-matrix'),\n    matcher: /.*/,\n    error: true // Handle \"error\" event\n};\n\nvows.__defineGetter__('reporter', function () {\n    return vows.options.reporter;\n});\n\nvar stylize = require('./vows/console').stylize;\nvar console = vows.console = require('./vows/console');\n\nvows.inspect = require('./vows/console').inspect;\nvows.prepare = require('./vows/extras').prepare;\nvows.tryEnd  = require('./vows/suite').tryEnd;\n\n//\n// Assertion Macros & Extensions\n//\nrequire('./assert/error');\nrequire('./assert/macros');\n\n//\n// Suite constructor\n//\nvar Suite = require('./vows/suite').Suite;\n\n//\n// This function gets added to events.EventEmitter.prototype, by default.\n// It's essentially a wrapper around `on`, which adds all the specification\n// goodness.\n//\nfunction addVow(vow) {\n    var batch = vow.batch,\n        event = vow.binding.context.event || 'success',\n        self = this;\n\n    batch.total ++;\n    batch.vows.push(vow);\n\n    // always set a listener on the event\n    this.on(event, function () {\n        if(vow.caughtError)\n            return;\n\n        var args = Array.prototype.slice.call(arguments);\n        // If the vow is a sub-event then we know it is an\n        // emitted event.  So I don't muck with the arguments\n        // However the legacy behavior:\n        // If the callback is expecting two or more arguments,\n        // pass the error as the first (null) and the result after.\n        if (!(this.ctx && this.ctx.isEvent) &&\n            vow.callback.length >= 2 && batch.suite.options.error) {\n            args.unshift(null);\n        }\n        runTest(args, this.ctx);\n        vows.tryEnd(batch);\n    });\n\n    if (event !== 'error') {\n        this.on(\"error\", function (err) {\n            vow.caughtError = true;\n            if (vow.callback.length >= 2 || !batch.suite.options.error) {\n                runTest(arguments, this.ctx);\n            } else {\n                output('errored', { type: 'emitter', error: err.stack ||\n                       err.message || JSON.stringify(err) });\n            }\n            vows.tryEnd(batch);\n        });\n    }\n\n    // in case an event fired before we could listen\n    if (this._vowsEmitedEvents &&\n        this._vowsEmitedEvents.hasOwnProperty(event)) {\n        // make sure no one is messing with me\n        if (Array.isArray(this._vowsEmitedEvents[event])) {\n            // I don't think I need to optimize for one event,\n            // I think it is more important to make sure I check the vow n times\n            self._vowsEmitedEvents[event].forEach(function(args) {\n                runTest(args, self.ctx);\n            });\n        } else {\n            // initial conditions problem\n            throw new Error('_vowsEmitedEvents[' + event + '] is not an Array')\n        }\n        vows.tryEnd(batch);\n    }\n\n    return this;\n\n    function runTest(args, ctx) {\n        if (vow.callback instanceof String) {\n            return output('pending');\n        }\n\n        if (vow.binding.context.isEvent && vow.binding.context.after) {\n            var after = vow.binding.context.after;\n            // only need to check order.  I won't get here if the after event\n            // has never been emitted\n            if (self._vowsEmitedEventsOrder.indexOf(after) >\n                self._vowsEmitedEventsOrder.indexOf(event)) {\n                output('broken', event + ' emitted before ' + after);\n                return;\n            }\n        }\n\n        // Run the test, and try to catch `AssertionError`s and other exceptions;\n        // increment counters accordingly.\n        try {\n            vow.callback.apply(ctx === global || !ctx ? vow.binding : ctx, args);\n            output('honored');\n        } catch (e) {\n            if (e.name && e.name.match(/AssertionError/)) {\n                output('broken', e.toStringEx().replace(/\\`/g, '`'));\n            } else {\n                output('errored', e.stack || e.message || e);\n            }\n        }\n    }\n\n    function output(status, exception) {\n        batch[status] ++;\n        vow.status = status;\n\n        if (vow.context && batch.lastContext !== vow.context) {\n            batch.lastContext = vow.context;\n            batch.suite.report(['context', vow.context]);\n        }\n        batch.suite.report(['vow', {\n            title: vow.description,\n            context: vow.context,\n            status: status,\n            exception: exception || null\n        }]);\n    }\n};\n\n//\n// On exit, check that all emitters have been fired.\n// If not, report an error message.\n//\nprocess.on('exit', function () {\n    var results = { honored: 0, broken: 0, errored: 0, pending: 0, total: 0 },\n        failure;\n\n    vows.suites.forEach(function (s) {\n        if ((s.results.total > 0) && (s.results.time === null)) {\n            s.reporter.print('\\n\\n');\n            s.reporter.report(['error', { error: \"Asynchronous Error\", suite: s }]);\n        }\n        s.batches.forEach(function (b) {\n            var unFired = [];\n\n            b.vows.forEach(function (vow) {\n                if (! vow.status) {\n                    if (unFired.indexOf(vow.context) === -1) {\n                        unFired.push(vow.context);\n                    }\n                }\n            });\n\n            if (unFired.length > 0) { util.print('\\n'); }\n\n            unFired.forEach(function (title) {\n                s.reporter.report(['error', {\n                    error: \"callback not fired\",\n                    context: title,\n                    batch: b,\n                    suite: s\n                }]);\n            });\n\n            if (b.status === 'begin') {\n                failure = true;\n                results.errored ++;\n                results.total ++;\n            }\n            Object.keys(results).forEach(function (k) { results[k] += b[k] });\n        });\n    });\n    if (failure) {\n        util.puts(console.result(results));\n        process.exit(1);\n    }\n});\n\nvows.suites = [];\n\n// We need the old emit function so we can hook it\n// and do magic to deal with events that have fired\nvar oldEmit = vows.options.Emitter.prototype.emit;\n\n//\n// Create a new test suite\n//\nvows.describe = function (subject) {\n    var suite = new(Suite)(subject);\n\n    this.options.Emitter.prototype.addVow = addVow;\n    // just in case someone emit's before I get to it\n    this.options.Emitter.prototype.emit = function (event) {\n        this._vowsEmitedEvents = this._vowsEmitedEvents || {};\n        this._vowsEmitedEventsOrder = this._vowsEmitedEventsOrder || [];\n        // slice off the event\n        var args = Array.prototype.slice.call(arguments, 1);\n        // if multiple events are fired, add or push\n        if (this._vowsEmitedEvents.hasOwnProperty(event)) {\n            this._vowsEmitedEvents[event].push(args);\n        } else {\n            this._vowsEmitedEvents[event] = [args];\n        }\n\n        // push the event onto a stack so I have an order\n        this._vowsEmitedEventsOrder.push(event);\n        return oldEmit.apply(this, arguments);\n    }\n    this.suites.push(suite);\n\n    //\n    // Add any additional arguments as batches if they're present\n    //\n    if (arguments.length > 1) {\n        for (var i = 1, l = arguments.length; i < l; ++i) {\n            suite.addBatch(arguments[i]);\n        }\n    }\n\n    return suite;\n};\n\n\nvows.version = JSON.parse(require('fs')\n                          .readFileSync(path.join(__dirname, '..', 'package.json')))\n                          .version\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/vows/reporters/dot-matrix.js":"var options = { tail: '' },\n    console = require('../../vows/console'),\n    stylize = console.stylize,\n    puts = console.puts(options);\n//\n// Console reporter\n//\nvar messages = [], lastContext;\n\nthis.name = 'dot-matrix';\nthis.setStream = function (s) {\n    options.stream = s;\n};\n\nthis.reset = function () {\n    messages = [];\n    lastContext = null;\n};\nthis.report = function (data) {\n    var event = data[1];\n\n    switch (data[0]) {\n        case 'subject':\n            // messages.push(stylize(event, 'underline') + '\\n');\n            break;\n        case 'context':\n            break;\n        case 'vow':\n            if (event.status === 'honored') {\n                puts(stylize('·', 'green'));\n            } else if (event.status === 'pending') {\n                puts(stylize('-', 'cyan'));\n            } else {\n                if (lastContext !== event.context) {\n                    lastContext = event.context;\n                    messages.push('  ' + event.context);\n                }\n                if (event.status === 'broken') {\n                    puts(stylize('✗', 'yellow'));\n                    messages.push(console.vowText(event));\n                } else if (event.status === 'errored') {\n                    puts(stylize('✗', 'red'));\n                    messages.push(console.vowText(event));\n                }\n                messages.push('');\n            }\n            break;\n        case 'end':\n            puts(' ');\n            break;\n        case 'finish':\n            if (messages.length) {\n                puts('\\n\\n' + messages.join('\\n'));\n            } else {\n                puts('');\n            }\n            puts(console.result(event).join('\\n'));\n            break;\n        case 'error':\n            puts(console.error(event));\n            break;\n    }\n};\n\nthis.print = function (str) {\n    puts(str);\n};\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/vows/console.js":"var eyes = require('eyes').inspector({ stream: null, styles: false });\n\n// Stylize a string\nthis.stylize = function stylize(str, style) {\n    if (module.exports.nocolor) {\n      return str;\n    }\n\n    var styles = {\n        'bold'      : [1,  22],\n        'italic'    : [3,  23],\n        'underline' : [4,  24],\n        'cyan'      : [96, 39],\n        'yellow'    : [33, 39],\n        'green'     : [32, 39],\n        'red'       : [31, 39],\n        'grey'      : [90, 39],\n        'green-hi'  : [92, 32],\n    };\n    return '\\033[' + styles[style][0] + 'm' + str +\n           '\\033[' + styles[style][1] + 'm';\n};\n\nvar $ = this.$ = function (str) {\n    str = new(String)(str);\n\n    ['bold', 'grey', 'yellow', 'red', 'green', 'white', 'cyan', 'italic'].forEach(function (style) {\n        Object.defineProperty(str, style, {\n            get: function () {\n                return exports.$(exports.stylize(this, style));\n            }\n        });\n    });\n    return str;\n};\n\nthis.puts = function (options) {\n    var stylize = exports.stylize;\n    options.stream || (options.stream = process.stdout);\n    options.tail = options.tail || '';\n\n    return function (args) {\n        args = Array.prototype.slice.call(arguments);\n        if (!options.raw) {\n            args = args.map(function (a) {\n                return a.replace(/`([^`]+)`/g,   function (_, capture) { return stylize(capture, 'italic') })\n                        .replace(/\\*([^*]+)\\*/g, function (_, capture) { return stylize(capture, 'bold') })\n                        .replace(/\\n/g, function (_, capture) { return ' \\n  ' } );\n            });\n        }\n        return options.stream.write(args.join('\\n') + options.tail);\n    };\n};\n\nthis.log = this.puts({});\n\nthis.result = function (event) {\n    var result = [], buffer = [], time = '', header;\n    var complete = event.honored + event.pending + event.errored + event.broken;\n    var status = (event.errored && 'errored') || (event.broken && 'broken') ||\n                 (event.honored && 'honored') || (event.pending && 'pending');\n\n    if (event.total === 0) {\n        return [$(\"Could not find any tests to run.\").bold.red];\n    }\n\n    event.honored && result.push($(event.honored).bold + \" honored\");\n    event.broken  && result.push($(event.broken).bold  + \" broken\");\n    event.errored && result.push($(event.errored).bold + \" errored\");\n    event.pending && result.push($(event.pending).bold + \" pending\");\n\n    if (complete < event.total) {\n        result.push($(event.total - complete).bold + \" dropped\");\n    }\n\n    result = result.join(' ∙ ');\n\n    header = {\n        honored: '✓ ' + $('OK').bold.green,\n        broken:  '✗ ' + $('Broken').bold.yellow,\n        errored: '✗ ' + $('Errored').bold.red,\n        pending: '- ' + $('Pending').bold.cyan\n    }[status] + ' » ';\n\n    if (typeof(event.time) === 'number') {\n        time = ' (' + event.time.toFixed(3) + 's)';\n        time = this.stylize(time, 'grey');\n    }\n    buffer.push(header + result + time + '\\n');\n\n    return buffer;\n};\n\nthis.inspect = function inspect(val) {\n    if (module.exports.nocolor) {\n      return eyes(val);\n    }\n\n    return '\\033[1m' + eyes(val) + '\\033[22m';\n};\n\nthis.error = function (obj) {\n    var string  = '✗ ' + $('Errored ').red + '» ';\n        string += $(obj.error).red.bold                         + '\\n';\n        string += (obj.context ? '    in ' + $(obj.context).red + '\\n': '');\n        string += '    in ' + $(obj.suite.subject).red          + '\\n';\n        string += '    in ' + $(obj.suite._filename).red;\n\n    return string;\n};\n\nthis.contextText = function (event) {\n    return '  ' + event;\n};\n\nthis.vowText = function (event) {\n    var buffer = [];\n\n    buffer.push('   ' + {\n        honored: ' ✓ ',\n        broken:  ' ✗ ',\n        errored: ' ✗ ',\n        pending: ' - '\n    }[event.status] + this.stylize(event.title, ({\n        honored: 'green',\n        broken:  'yellow',\n        errored: 'red',\n        pending: 'cyan'\n    })[event.status]));\n\n    if (event.status === 'broken') {\n        buffer.push('      » ' + event.exception);\n    } else if (event.status === 'errored') {\n        if (event.exception.type === 'emitter') {\n            buffer.push('      » ' + this.stylize(\"An unexpected error was caught: \" +\n                           this.stylize(event.exception.error, 'bold'), 'red'));\n        } else {\n            buffer.push('    ' + this.stylize(event.exception, 'red'));\n        }\n    }\n    return buffer.join('\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/vows/extras.js":"var events = require('events');\n//\n// Wrap a Node.js style async function into an EventEmitter\n//\nthis.prepare = function (obj, targets) {\n    targets.forEach(function (target) {\n        if (target in obj) {\n            obj[target] = (function (fun) {\n                return function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    var ee = new(events.EventEmitter);\n\n                    args.push(function (err /* [, data] */) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n\n                        if (err) { ee.emit.apply(ee, ['error', err].concat(args)) }\n                        else     { ee.emit.apply(ee, ['success'].concat(args)) }\n                    });\n                    fun.apply(obj, args);\n\n                    return ee;\n                };\n            })(obj[target]);\n        }\n    });\n    return obj;\n};\n\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/vows/suite.js":"var events = require('events'),\n    path = require('path');\n\nvar vows = require('../vows');\nvar Context = require('../vows/context').Context;\n\nthis.Suite = function (subject) {\n    this.subject = subject;\n    this.matcher = /.*/;\n    this.reporter = require('./reporters/dot-matrix');\n    this.batches = [];\n    this.options = { error: true };\n    this.reset();\n};\n\nthis.Suite.prototype = new(function () {\n    this.reset = function () {\n        this.results = {\n            honored: 0,\n            broken:  0,\n            errored: 0,\n            pending: 0,\n            total:   0,\n            time:  null\n        };\n        this.batches.forEach(function (b) {\n            b.lastContext = null;\n            b.remaining = b._remaining;\n            b.honored = b.broken = b.errored = b.total = b.pending = 0;\n            b.vows.forEach(function (vow) { vow.status = null });\n            b.teardowns = [];\n        });\n    };\n\n    this.addBatch = function (tests) {\n        this.batches.push({\n            tests: tests,\n            suite:  this,\n            vows:     [],\n            remaining: 0,\n           _remaining: 0,\n            honored:   0,\n            broken:    0,\n            errored:   0,\n            pending:   0,\n            total:     0,\n            teardowns: []\n        });\n        return this;\n    };\n    this.addVows = this.addBatch;\n\n    this.parseBatch = function (batch, matcher) {\n        var tests = batch.tests;\n\n        if ('topic' in tests) {\n            throw new(Error)(\"missing top-level context.\");\n        }\n        // Count the number of vows/emitters expected to fire,\n        // so we know when the tests are over.\n        // We match the keys against `matcher`, to decide\n        // whether or not they should be included in the test.\n        // Any key, including assertion function keys can be matched.\n        // If a child matches, then the n parent topics must not be skipped.\n        (function count(tests, _match) {\n            var match = false;\n\n            var keys = Object.keys(tests).filter(function (k) {\n                return k !== 'topic' && k !== 'teardown';\n            });\n\n            for (var i = 0, key; i < keys.length; i++) {\n                key = keys[i];\n\n                // If the parent node, or this one matches.\n                match = _match || matcher.test(key);\n\n                if (typeof(tests[key]) === 'object') {\n                    match = count(tests[key], match);\n                } else {\n                    if (typeof(tests[key]) === 'string') {\n                        tests[key] = new(String)(tests[key]);\n                    }\n                    if (! match) {\n                        tests[key]._skip = true;\n                    }\n                }\n            }\n\n            // If any of the children matched,\n            // don't skip this node.\n            for (var i = 0; i < keys.length; i++) {\n                if (! tests[keys[i]]._skip) { match = true }\n            }\n\n            if (match) { batch.remaining ++ }\n            else       { tests._skip = true }\n\n            return match;\n        })(tests, false);\n\n        batch._remaining = batch.remaining;\n    };\n\n    this.runBatch = function (batch) {\n        var topic,\n            tests   = batch.tests,\n            emitter = batch.emitter = new(events.EventEmitter);\n\n        var that = this;\n\n        batch.status = 'begin';\n\n        // The test runner, it calls itself recursively, passing the\n        // previous context to the inner contexts. This is so the `topic`\n        // functions have access to all the previous context topics in their\n        // arguments list.\n        // It is defined and invoked at the same time.\n        // If it encounters a `topic` function, it waits for the returned\n        // emitter to emit (the topic), at which point it runs the functions under it,\n        // passing the topic as an argument.\n        (function run(ctx, lastTopic) {\n            var old = false;\n            topic = ctx.tests.topic;\n\n            if (typeof(topic) === 'function') {\n                if (ctx.isEvent || ctx.name === 'on') {\n                    throw new Error('Event context cannot contain a topic');\n                }\n\n                // Run the topic, passing the previous context topics\n                try {\n                    topic = topic.apply(ctx.env, ctx.topics);\n                }\n                // If an unexpected error occurs in the topic, set the return\n                // value to 'undefined' and call back with the error\n                catch (ex) {\n                    ctx.env.callback(ex);\n                    topic = undefined;\n                }\n\n                if (typeof(topic) === 'undefined') { ctx._callback = true }\n            }\n\n            // If this context has a topic, store it in `lastTopic`,\n            // if not, use the last topic, passed down by a parent\n            // context.\n            if (typeof(topic) !== 'undefined' || ctx._callback) {\n                lastTopic = topic;\n            } else {\n                old   = true;\n                topic = lastTopic;\n            }\n\n            // If the topic doesn't return an event emitter (such as an EventEmitter),\n            // we create it ourselves, and emit the value on the next tick.\n            if (! (topic &&\n                   topic.constructor === events.EventEmitter)) {\n                // If the context is a traditional vow, then a topic can ONLY\n                // be an EventEmitter.  However if the context is a sub-event\n                // then the topic may be an instanceof EventEmitter\n                if (!ctx.isEvent ||\n                   (ctx.isEvent && !(topic instanceof events.EventEmitter))) {\n\n                      ctx.emitter = new(events.EventEmitter);\n\n                      if (! ctx._callback) {\n                          process.nextTick(function (val) {\n                              return function () {\n                                ctx.emitter.emit(\"success\", val)\n                              };\n                          }(topic));\n                      }\n                      // if I have a callback, push the new topic back up to\n                      // lastTopic\n                      if (ctx._callback) {\n                          lastTopic = topic = ctx.emitter;\n                      } else {\n                          topic = ctx.emitter;\n                      }\n                }\n            }\n\n            topic.on(ctx.event, function (val) {\n                // Once the topic fires, add the return value\n                // to the beginning of the topics list, so it\n                // becomes the first argument for the next topic.\n                // If we're using the parent topic, no need to\n                // prepend it to the topics list, or we'll get\n                // duplicates.\n                if (!old || ctx.isEvent) {\n                    Array.prototype.unshift.apply(ctx.topics, arguments)\n                };\n            });\n            if (topic.setMaxListeners) { topic.setMaxListeners(Infinity) }\n            // Now run the tests, or sub-contexts\n            Object.keys(ctx.tests).filter(function (k) {\n                return ctx.tests[k] && k !== 'topic'    &&\n                                       k !== 'teardown' && !ctx.tests[k]._skip;\n            }).forEach(function (item) {\n                // Create a new evaluation context,\n                // inheriting from the parent one.\n                var env = Object.create(ctx.env);\n                env.suite = that;\n\n                // Holds the current test or context\n                var vow = Object.create({\n                    callback: ctx.tests[item],\n                    context: ctx.title,\n                    description: item,\n                    binding: ctx.env,\n                    status: null,\n                    batch: batch\n                });\n\n                // If we encounter a function, add it to the callbacks\n                // of the `topic` function, so it'll get called once the\n                // topic fires.\n                // If we encounter an object literal, we recurse, sending it\n                // our current context.\n                if ((typeof(vow.callback) === 'function') ||\n                    (vow.callback instanceof String)) {\n                    topic.addVow(vow);\n                } else if (typeof(vow.callback) === 'object') {\n                    // If there's a setup stage, we have to wait for it to fire,\n                    // before calling the inner context.\n                    // If the event has already fired, the context is 'on' or\n                    // there is no setup stage, just run the inner context\n                    // synchronously.\n                    if (topic &&\n                        ctx.name !== 'on' &&\n                        (!topic._vowsEmitedEvents || !topic._vowsEmitedEvents.hasOwnProperty(ctx.event))) {\n                        var runInnerContext = function(ctx){\n                            return function(val){\n                                return run(new (Context)(vow, ctx, env), lastTopic);\n                            };\n                        }(ctx);\n                        topic.on(ctx.event, runInnerContext);\n                        // Run an inner context if the outer context fails, too.\n                        topic.on('error', runInnerContext);\n                    }\n                    else {\n                        run(new (Context)(vow, ctx, env), lastTopic);\n                    }\n                }\n            });\n            // Teardown\n            if (ctx.tests.teardown) {\n                batch.teardowns.push(ctx);\n            }\n            if (! ctx.tests._skip) {\n                batch.remaining --;\n            }\n            // Check if we're done running the tests\n            exports.tryEnd(batch);\n        // This is our initial, empty context\n        })(new(Context)({ callback: tests, context: null, description: null }, {}));\n        return emitter;\n    };\n\n    this.report = function () {\n        return this.reporter.report.apply(this.reporter, arguments);\n    };\n\n    this.run = function (options, callback) {\n        var that = this, start;\n\n        options = options || {};\n\n        Object.keys(options).forEach(function (k) {\n            that.options[k] = options[k];\n        });\n\n        this.matcher = this.options.matcher  || this.matcher;\n\n        if (options.reporter) {\n          try {\n            this.reporter = typeof options.reporter === 'string'\n                ? require('./reporters/' + options.reporter)\n                : options.reporter;\n          } catch (e) {\n            console.log('Reporter was not found, defaulting to dot-matrix.');\n          }\n        }\n\n        this.batches.forEach(function (batch) {\n            that.parseBatch(batch, that.matcher);\n        });\n\n        this.reset();\n\n        start = new(Date);\n\n        if (this.batches.filter(function (b) { return b.remaining > 0 }).length) {\n            this.report(['subject', this.subject]);\n        }\n\n        return (function run(batches) {\n            var batch = batches.shift();\n\n            if (batch) {\n                // If the batch has no vows to run,\n                // go to the next one.\n                if (batch.remaining === 0) {\n                    run(batches);\n                } else {\n                    that.runBatch(batch).on('end', function () {\n                        run(batches);\n                    });\n                }\n            } else {\n                that.results.time = (new(Date) - start) / 1000;\n                that.report(['finish', that.results]);\n\n                if (callback) { callback(that.results) }\n\n                if (that.results.honored + that.results.pending === that.results.total) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            }\n        })(this.batches.slice(0));\n    };\n\n    this.runParallel = function () {};\n\n    this.export = function (module, options) {\n        var that = this;\n\n        Object.keys(options || {}).forEach(function (k) {\n            that.options[k] = options[k];\n        });\n\n        if (require.main === module) {\n            return this.run();\n        } else {\n            return module.exports[this.subject] = this;\n        }\n    };\n    this.exportTo = function (module, options) { // Alias, for JSLint\n        return this.export(module, options);\n    };\n});\n\n//\n// Checks if all the tests in the batch have been run,\n// and triggers the next batch (if any), by emitting the 'end' event.\n//\nthis.tryEnd = function (batch) {\n    var result, style, time;\n\n    if (batch.honored + batch.broken + batch.errored + batch.pending === batch.total &&\n        batch.remaining === 0) {\n\n        Object.keys(batch).forEach(function (k) {\n            (k in batch.suite.results) && (batch.suite.results[k] += batch[k]);\n        });\n\n        if (batch.teardowns) {\n            for (var i = batch.teardowns.length - 1, ctx; i >= 0; i--) {\n                runTeardown(batch.teardowns[i]);\n            }\n\n            maybeFinish();\n        }\n\n        function runTeardown(teardown) {\n            var env = Object.create(teardown.env);\n\n            Object.defineProperty(env, \"callback\", {\n                get: function () {\n                    teardown.awaitingCallback = true;\n\n                    return function () {\n                        teardown.awaitingCallback = false;\n                        maybeFinish();\n                    };\n                }\n            });\n\n            teardown.tests.teardown.apply(env, teardown.topics);\n        }\n\n        function maybeFinish() {\n            var pending = batch.teardowns.filter(function (teardown) {\n                return teardown.awaitingCallback;\n            });\n\n            if (pending.length === 0) {\n                finish();\n            }\n        }\n\n        function finish() {\n            batch.status = 'end';\n            batch.suite.report(['end']);\n            batch.emitter.emit('end', batch.honored, batch.broken, batch.errored, batch.pending);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/vows/context.js":"\nthis.Context = function (vow, ctx, env) {\n    var that = this;\n\n    this.tests = vow.callback;\n    this.topics = (ctx.topics || []).slice(0);\n    this.emitter = null;\n    this.env = env || {};\n    this.env.context = this;\n\n    this.env.callback = function (/* arguments */) {\n        var ctx = this;\n        var args = Array.prototype.slice.call(arguments);\n\n        var emit = (function (args) {\n            //\n            // Convert callback-style results into events.\n            //\n            if (vow.batch.suite.options.error) {\n                return function () {\n                    var e = args.shift();\n                    that.emitter.ctx = ctx;\n                    // We handle a special case, where the first argument is a\n                    // boolean, in which case we treat it as a result, and not\n                    // an error. This is useful for `path.exists` and other\n                    // functions like it, which only pass a single boolean\n                    // parameter instead of the more common (error, result) pair.\n                    if (typeof(e) === 'boolean' && args.length === 0) {\n                        that.emitter.emit.call(that.emitter, 'success', e);\n                    } else {\n                        if (e) { that.emitter.emit.apply(that.emitter, ['error', e].concat(args)) }\n                        else   { that.emitter.emit.apply(that.emitter, ['success'].concat(args)) }\n                    }\n                };\n            } else {\n                return function () {\n                    that.emitter.ctx = ctx;\n                    that.emitter.emit.apply(that.emitter, ['success'].concat(args));\n                };\n            }\n        })(args.slice(0));\n        // If `this.callback` is called synchronously,\n        // the emitter will not have been set yet,\n        // so we defer the emition, that way it'll behave\n        // asynchronously.\n        if (that.emitter) { emit() }\n        else              { process.nextTick(emit) }\n    };\n    this.name = vow.description;\n    // events is an alias for on\n    if (this.name === 'events') {\n      this.name = vow.description = 'on';\n    }\n\n    // if this is a sub-event context AND it's context was an event,\n    // then I must enforce event order.\n    // this will not do a good job of handling pin-pong events\n    if (this.name === 'on' && ctx.isEvent) {\n        this.after = ctx.name;\n    }\n\n    if (ctx.name === 'on') {\n        this.isEvent = true;\n        this.event = this.name;\n        this.after = ctx.after;\n    } else {\n        this.isEvent = false;\n        this.event = 'success';\n    }\n\n    this.title = [\n        ctx.title || '',\n        vow.description || ''\n    ].join(/^[#.:]/.test(vow.description) ? '' : ' ').trim();\n};\n\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/assert/error.js":"/**\nThis software contains code adapted from Mocha\n(https://github.com/visionmedia/mocha) by TJ Holowaychuk\nand is used herein under the following MIT license:\n\nCopyright (c) 2011-2012 TJ Holowaychuk <tj@vision-media.ca>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar stylize = require('../vows/console').stylize;\nvar inspect = require('../vows/console').inspect;\nvar diff = require('diff');\n\n/**\n * Pad the given `str` to `len`.\n *\n * @param {String} str\n * @param {String} len\n * @return {String}\n * @api private\n */\n\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @param {String} name\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction styleLines(str, name) {\n  return str.split('\\n').map(function(str){\n    return stylize(str, name);\n  }).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @param {Error} err\n * @return {String}\n * @api private\n */\n\nfunction errorDiff(err, type) {\n  return diff['diff' + type](err.expected, err.actual).map(function(str){\n    if (/^(\\n+)$/.test(str.value)) str.value = Array(++RegExp.$1.length).join('<newline>');\n    if (str.added) return styleLines(str.value, 'green');\n    if (str.removed) return styleLines(str.value, 'red');\n    return str.value;\n  }).join('');\n}\n\nfunction extractPathFromStack(stack) {\n    var regex = /\\((.*?[a-zA-Z0-9._-]+\\.(?:js|coffee))(:\\d+):\\d+\\)/;\n    return stack.match(regex);\n}\n\n/*\n Do not override .toString() when this.stack is used,\n otherwise this will end in an endless recursive call...\n See issue https://github.com/cloudhead/vows/issues/278#issuecomment-22837493\n*/\nrequire('assert').AssertionError.prototype.toStringEx = function () {\n    var that = this,\n        source;\n\n    if (this.stack) {\n        source = extractPathFromStack(this.stack);\n    }\n\n    function parse(str) {\n        var actual = that.actual,\n            expected = that.expected,\n            msg, len;\n\n        if (\n            'string' === typeof actual &&\n            'string' === typeof expected\n        ) {\n            len = Math.max(actual.length, expected.length);\n\n            if (len < 20) msg = errorDiff(that, 'Chars');\n            else msg = errorDiff(that, 'Words');\n\n            // linenos\n            var lines = msg.split('\\n');\n            if (lines.length > 4) {\n                var width = String(lines.length).length;\n                msg = lines.map(function(str, i){\n                    return pad(++i, width) + ' |' + ' ' + str;\n                }).join('\\n');\n            }\n\n            // legend\n            msg = '\\n'\n                + stylize('actual', 'green')\n                + ' '\n                + stylize('expected', 'red')\n                + '\\n\\n'\n                + msg\n                + '\\n';\n\n            // indent\n            msg = msg.replace(/^/gm, '      ');\n\n            return msg;\n        }\n\n        actual = inspect(actual, {showHidden: actual instanceof Error});\n\n        if (expected instanceof Function) {\n            expected = expected.name;\n        }\n        else {\n            expected = inspect(expected, {showHidden: actual instanceof Error});\n        }\n\n        return str.replace(/{actual}/g,   actual).\n                   replace(/{operator}/g, stylize(that.operator, 'bold')).\n                   replace(/{expected}/g, expected);\n    }\n\n    if (this.message) {\n        var msg = stylize(parse(this.message), 'yellow');\n      \tif (source) {\n      \t\t  msg += stylize(' // ' + source[1] + source[2], 'grey');\n      \t}\n        return msg;\n    } else {\n        return stylize([\n            this.expected,\n            this.operator,\n            this.actual\n        ].join(' '), 'yellow');\n    }\n};\n\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/assert/macros.js":"var assert = require('assert'),\n    utils = require('./utils');\n\nvar messages = {\n    'equal'       : \"expected {expected},\\n\\tgot\\t {actual} ({operator})\",\n    'notEqual'    : \"didn't expect {actual} ({operator})\"\n};\nmessages['strictEqual']    = messages['deepEqual']    = messages['equal'];\nmessages['notStrictEqual'] = messages['notDeepEqual'] = messages['notEqual'];\n\nfor (var key in messages) {\n    assert[key] = (function (key, callback) {\n        return function (actual, expected, message) {\n            callback(actual, expected, message || messages[key]);\n        };\n    })(key, assert[key]);\n}\n\nassert.epsilon = function (eps, actual, expected, message) {\n    assertMissingArguments(arguments, assert.epsilon);\n    if (isNaN(eps)) {\n        assert.fail(actual, expected, message || \"cannot compare {actual} with {expected} \\u00B1 NaN\");\n    } else if (isNaN(actual) || Math.abs(actual - expected) > eps) {\n        assert.fail(actual, expected, message || \"expected {expected} \\u00B1\"+ eps +\", but was {actual}\");\n    }\n};\n\nassert.ok = (function (callback) {\n    assertMissingArguments(arguments, assert.ok);\n    return function (actual, message) {\n        callback(actual, message ||  \"expected expression to evaluate to {expected}, but was {actual}\");\n    };\n})(assert.ok);\n\nassert.match = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.match);\n    if (! expected.test(actual)) {\n        assert.fail(actual, expected, message || \"expected {actual} to match {expected}\", \"match\", assert.match);\n    }\n};\nassert.matches = assert.match;\n\nassert.isTrue = function (actual, message) {\n    assertMissingArguments(arguments, assert.isTrue);\n    if (actual !== true) {\n        assert.fail(actual, true, message || \"expected {expected}, got {actual}\", \"===\", assert.isTrue);\n    }\n};\nassert.isFalse = function (actual, message) {\n    assertMissingArguments(arguments, assert.isFalse);\n    if (actual !== false) {\n        assert.fail(actual, false, message || \"expected {expected}, got {actual}\", \"===\", assert.isFalse);\n    }\n};\nassert.isZero = function (actual, message) {\n    assertMissingArguments(arguments, assert.isZero);\n    if (actual !== 0) {\n        assert.fail(actual, 0, message || \"expected {expected}, got {actual}\", \"===\", assert.isZero);\n    }\n};\nassert.isNotZero = function (actual, message) {\n    assertMissingArguments(arguments, assert.isNotZero);\n    if (actual === 0) {\n        assert.fail(actual, 0, message || \"expected non-zero value, got {actual}\", \"===\", assert.isNotZero);\n    }\n};\n\nassert.greater = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.greater);\n    if (actual <= expected) {\n        assert.fail(actual, expected, message || \"expected {actual} to be greater than {expected}\", \">\", assert.greater);\n    }\n};\nassert.lesser = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.lesser);\n    if (actual >= expected) {\n        assert.fail(actual, expected, message || \"expected {actual} to be lesser than {expected}\", \"<\", assert.lesser);\n    }\n};\n\nassert.inDelta = function (actual, expected, delta, message) {\n    assertMissingArguments(arguments, assert.inDelta);\n    var lower = expected - delta;\n    var upper = expected + delta;\n    if (actual != +actual || actual < lower || actual > upper) {\n        assert.fail(actual, expected, message || \"expected {actual} to be in within *\" + delta.toString() + \"* of {expected}\", null, assert.inDelta);\n    }\n};\n\n//\n// Inclusion\n//\nassert.include = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.include);\n    if ((function (obj) {\n        if (isArray(obj) || isString(obj)) {\n            return obj.indexOf(expected) === -1;\n        } else if (isObject(actual)) {\n            return ! obj.hasOwnProperty(expected);\n        }\n        return true;\n    })(actual)) {\n        assert.fail(actual, expected, message || \"expected {actual} to include {expected}\", \"include\", assert.include);\n    }\n};\nassert.includes = assert.include;\n\nassert.notInclude = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.notInclude);\n    if ((function (obj) {\n        if (isArray(obj) || isString(obj)) {\n            return obj.indexOf(expected) !== -1;\n        } else if (isObject(actual)) {\n            return obj.hasOwnProperty(expected);\n        }\n        return true;\n    })(actual)) {\n        assert.fail(actual, expected, message || \"expected {actual} not to include {expected}\", \"include\", assert.notInclude);\n    }\n};\nassert.notIncludes = assert.notInclude;\n\nassert.deepInclude = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.deepInclude);\n    if (!isArray(actual)) {\n        return assert.include(actual, expected, message);\n    }\n    if (!actual.some(function (item) { return utils.deepEqual(item, expected) })) {\n        assert.fail(actual, expected, message || \"expected {actual} to include {expected}\", \"include\", assert.deepInclude);\n    }\n};\nassert.deepIncludes = assert.deepInclude;\n\n//\n// Length\n//\nassert.isEmpty = function (actual, message) {\n    assertMissingArguments(arguments, assert.isEmpty);\n    if ((isObject(actual) && Object.keys(actual).length > 0) || actual.length > 0) {\n        assert.fail(actual, 0, message || \"expected {actual} to be empty\", \"length\", assert.isEmpty);\n    }\n};\nassert.isNotEmpty = function (actual, message) {\n    assertMissingArguments(arguments, assert.isNotEmpty);\n    if ((isObject(actual) && Object.keys(actual).length === 0) || actual.length === 0) {\n        assert.fail(actual, 0, message || \"expected {actual} to be not empty\", \"length\", assert.isNotEmpty);\n    }\n};\n\nassert.lengthOf = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.lengthOf);\n    var len = isObject(actual) ? Object.keys(actual).length : actual.length;\n    if (len !== expected) {\n        assert.fail(actual, expected, message || \"expected {actual} to have {expected} element(s)\", \"length\", assert.length);\n    }\n};\n\n//\n// Type\n//\nassert.isArray = function (actual, message) {\n    assertMissingArguments(arguments, assert.isArray);\n    assertTypeOf(actual, 'array', message || \"expected {actual} to be an Array\", assert.isArray);\n};\nassert.isObject = function (actual, message) {\n    assertMissingArguments(arguments, assert.isObject);\n    assertTypeOf(actual, 'object', message || \"expected {actual} to be an Object\", assert.isObject);\n};\nassert.isNumber = function (actual, message) {\n    assertMissingArguments(arguments, assert.isNumber);\n    if (isNaN(actual)) {\n        assert.fail(actual, 'number', message || \"expected {actual} to be of type {expected}\", \"isNaN\", assert.isNumber);\n    } else {\n        assertTypeOf(actual, 'number', message || \"expected {actual} to be a Number\", assert.isNumber);\n    }\n};\nassert.isBoolean = function (actual, message) {\n    assertMissingArguments(arguments, assert.isBoolean);\n    if (actual !== true && actual !== false) {\n        assert.fail(actual, 'boolean', message || \"expected {actual} to be a Boolean\", \"===\", assert.isBoolean);\n    }\n};\nassert.isNaN = function (actual, message) {\n    assertMissingArguments(arguments, assert.isNaN);\n    if (actual === actual) {\n        assert.fail(actual, 'NaN', message || \"expected {actual} to be NaN\", \"===\", assert.isNaN);\n    }\n};\nassert.isNull = function (actual, message) {\n    assertMissingArguments(arguments, assert.isNull);\n    if (actual !== null) {\n        assert.fail(actual, null, message || \"expected {expected}, got {actual}\", \"===\", assert.isNull);\n    }\n};\nassert.isNotNull = function (actual, message) {\n    assertMissingArguments(arguments, assert.isNotNull);\n    if (actual === null) {\n        assert.fail(actual, null, message || \"expected non-null value, got {actual}\", \"===\", assert.isNotNull);\n    }\n};\nassert.isUndefined = function (actual, message) {\n    assertMissingArguments(arguments, assert.isUndefined);\n    if (actual !== undefined) {\n        assert.fail(actual, undefined, message || \"expected {actual} to be {expected}\", \"===\", assert.isUndefined);\n    }\n};\nassert.isDefined = function (actual, message) {\n    assertMissingArguments(arguments, assert.isDefined);\n    if(actual === undefined) {\n        assert.fail(actual, 0, message || \"expected {actual} to be defined\", \"===\", assert.isDefined);\n    }\n};\nassert.isString = function (actual, message) {\n    assertMissingArguments(arguments, assert.isString);\n    assertTypeOf(actual, 'string', message || \"expected {actual} to be a String\", assert.isString);\n};\nassert.isFunction = function (actual, message) {\n    assertMissingArguments(arguments, assert.isFunction);\n    assertTypeOf(actual, 'function', message || \"expected {actual} to be a Function\", assert.isFunction);\n};\nassert.typeOf = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.typeOf);\n    assertTypeOf(actual, expected, message, assert.typeOf);\n};\nassert.instanceOf = function (actual, expected, message) {\n    assertMissingArguments(arguments, assert.instanceof);\n    if (! (actual instanceof expected)) {\n        assert.fail(actual, expected, message || \"expected {actual} to be an instance of {expected}\", \"instanceof\", assert.instanceOf);\n    }\n};\n\n//\n// Utility functions\n//\n\nfunction assertMissingArguments(args, caller) {\n    if (args.length === 0) {\n        assert.fail(\"\", \"\", \"expected number of arguments to be greater than zero\", \"\", caller);\n    }\n}\n\nfunction assertTypeOf(actual, expected, message, caller) {\n    if (typeOf(actual) !== expected) {\n        assert.fail(actual, expected, message || \"expected {actual} to be of type {expected}\", \"typeOf\", caller);\n    }\n}\n\nfunction isArray (obj) {\n    return Array.isArray(obj);\n}\n\nfunction isString (obj) {\n    return typeof(obj) === 'string' || obj instanceof String;\n}\n\nfunction isObject (obj) {\n    return typeof(obj) === 'object' && obj && !isArray(obj);\n}\n\n// A better `typeof`\nfunction typeOf(value) {\n    var s = typeof(value),\n        types = [Object, Array, String, RegExp, Number, Function, Boolean, Date];\n\n    if (s === 'object' || s === 'function') {\n        if (value) {\n            types.forEach(function (t) {\n                if (value instanceof t) { s = t.name.toLowerCase() }\n            });\n        } else { s = 'null' }\n    }\n    return s;\n}\n","/home/travis/build/npmtest/node-npmtest-vows/node_modules/vows/lib/assert/utils.js":"\n// Taken from node/lib/assert.js\nexports.deepEqual = function (actual, expected) {\n  if (actual === expected) {\n    return true;\n\n  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {\n    if (actual.length != expected.length) return false;\n\n    for (var i = 0; i < actual.length; i++) {\n      if (actual[i] !== expected[i]) return false;\n    }\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  } else if (typeof actual != 'object' && typeof expected != 'object') {\n    return actual == expected;\n\n  } else {\n    return objEquiv(actual, expected);\n  }\n}\n\n// Taken from node/lib/assert.js\nexports.notDeepEqual = function (actual, expected, message) {\n  if (exports.deepEqual(actual, expected)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n}\n\n// Taken from node/lib/assert.js\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\n// Taken from node/lib/assert.js\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\n// Taken from node/lib/assert.js\nfunction objEquiv(a, b) {\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  if (a.prototype !== b.prototype) return false;\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return exports.deepEqual(a, b);\n  }\n  try {\n    var ka = Object.keys(a),\n        kb = Object.keys(b),\n        key, i;\n  } catch (e) {\n    return false;\n  }\n  if (ka.length != kb.length)\n    return false;\n  ka.sort();\n  kb.sort();\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!exports.deepEqual(a[key], b[key])) return false;\n  }\n  return true;\n}\n\n"}